name: PHP Pipeline

on:
  pull_request:
    branches: [ master ]

jobs:
  run-tests:

    runs-on: ubuntu-latest

    steps:
      - name: Setup environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: php-cs-fixer:3.4.0

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: repo


      - name: Install dependencies
        run: |
          cd repo
          composer install

      - name: Unit tests and code coverage report
        run: |
          cd repo
          composer run-script test:coverage
          head -n9 coverage/cover.txt | tail -n3 > coverage/coverageSummary.txt

      - name: Leave PR summary
        uses: actions/github-script@v6
        with:
          script: |
            const CODE_COVERAGE_THRESHOLD = 0;
            const reportFile = "repo/coverage/coverageSummary.txt";
            
            require('fs').readFile(reportFile, (err, buffer)=>{
              if(err) throw new Error(err);
              let summary = parseSummary(buffer.toString());              
              if(CODE_COVERAGE_THRESHOLD > summary.Total.percent){
                throw new Error(thresholdErrorMessage(summary));
              }
              writeCoverageReport(summary);
            })
            
            function thresholdErrorMessage(){
              msg = `** Code level coverage is too low (${summary.Total.percent}%, minimum required ${CODE_COVERAGE_THRESHOLD} %) **`;
              let strLen = msg.length;
              let border = "\n" +"".padStart(strLen, "*") + "\n";
              return  border + msg + border;
            }
            
            function parseSummary(summary){
              let result = {};
              const pattern = /(Classes|Methods|Lines).*(\d{1,3}\.\d{0,2})%\s*(\(.*\))/iug;
              for (const matchLine of summary.matchAll(pattern)) {
                if(matchLine[1] === "Lines") matchLine[1] = "Total";
                result[matchLine[1]] = { title: matchLine[1], percent: parseFloat(matchLine[2]), ratio: matchLine[3] }
              }
              return result;
            }
            
            function writeCoverageReport(summary){
              let msgToPush = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ""
            };
            
            console.log(summary);
            
            msgToPush.body = "### Pull request summary\n";
            msgToPush.body += "Code coverage:\n";
            msgToPush.body += `**${summary.Methods.title}**: ${summary.Methods.percent}% ${summary.Methods.ratio}\n`;
            msgToPush.body += `**${summary.Total.title}**: ${summary.Total.percent}% ${summary.Total.ratio}\n`;
            
            
            github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).then((response)=>{
                let createNew = true;
                for(const message of response.data){
                  if(message.user.type == "Bot"){
                    msgToPush.comment_id = message.id;
                    createNew = false;
                    break;
                  }
                }            
                if(createNew){
                  github.rest.issues.createComment(msgToPush);
                }else{
                  github.rest.issues.updateComment(msgToPush);
                }          
              }, error => {
                throw new Error(error);
              });
            }


