name: PHP Pipeline

on:
  pull_request:
    branches: [ master ]

jobs:
  run-tests:

    runs-on: ubuntu-latest

    steps:
      - name: Setup environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: php-cs-fixer:3.4.0

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: repo


      - name: Install dependencies
        run: |
          cd repo
          composer install

      - name: Unit tests and code coverage report
        run: |
          cd repo
          composer run-script test:coverage
          head -n9 coverage/cover.txt | tail -n1| grep -Pow '(\d{1,3}\.\d{0,2})%'| rev | cut -c2- | rev > coverage/coveragePercent.txt

      - name: Leave PR summary
        uses: actions/github-script@v6
        with:
          script: |
            const CODE_COVERAGE_THRESHOLD = 0;
            const reportFile = "repo/coverage/coveragePercent.txt";
            
            require('fs').readFile(reportFile, (err, buffer)=>{
              let coveragePercent = parseFloat(buffer.toString());
            
              if(CODE_COVERAGE_THRESHOLD > coveragePercent){
                throw new Error(thresholdErrorMessage());
              }
            
              writeCoverageReport(coveragePercent);
            })
            
            function thresholdErrorMessage(){
              msg = `** Code level coverage is too low (${totalCoverage}%, minimum required ${CODE_COVERAGE_THRESHOLD} %) **`;
              let strLen = msg.length;
              let border = "\n" +"".padStart(strLen, "*") + "\n";
              return  border + msg + border;
            }
            
            function writeCoverageReport(coveragePercent){
              let msgToPush = {
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: ""
              };
            
              msgToPush.body = "### Pull request summary\n";
              msgToPush.body += `Total code coverage: ${coveragePercent}%`
            
              github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              }).then((response)=>{
                let createNew = true;
                for(const message of response.data){
                  if(message.user.type == "Bot"){
                    msgToPush.comment_id = message.id;
                    createNew = false;
                    break;
                  }
                }
            
                if(createNew){
                  github.rest.issues.createComment(msgToPush);
                }else{
                  github.rest.issues.updateComment(msgToPush);
                }
            
              }, error => {
                throw new Error(error);
              });                     
            }
      

      #      - name: Make code coverage badge
      #        uses: timkrase/phpunit-coverage-badge@v1.2.1
      #        with:
      #          report: 'repo/coverage/clover.xml'
      #          coverage_badge_path: ./output/coverage.svg
      #          push_badge: false
      #
      #      - name: GitHub Pages v4
      #        uses: peaceiris/actions-gh-pages@v4.0.0
      #        with:
      #          github_token: ${{ secrets.GITHUB_TOKEN }}
      #          #       deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
      #          publish_dir: ./output
      #          publish_branch: bages-data
      #          commit_message: ${{ github.event.head_commit.message }}

#            - name: Leave PR summary
#              uses: actions/github-script@v6
#              with:
#                script: |
#                  let summaries = await github.rest.issues.listComments({
#                    issue_number: context.issue.number,
#                    owner: context.repo.owner,
#                    repo: context.repo.repo,
#                  });
#
#                  summaries.data.forEach((summary)=>{
#                    github.rest.issues.deleteComment({
#                      owner: context.repo.owner,
#                      repo: context.repo.repo,
#                      comment_id: summary.id,
#                    });
#                  });
#
#                  console.info("Old summaries deleted: " + summaries.data.length);
#
#                  github.rest.issues.createComment({
#                    issue_number: context.issue.number,
#                    owner: context.repo.owner,
#                    repo: context.repo.repo,
#                    body: 'ðŸ‘‹ Thanks for reporting! <img src="https://raw.githubusercontent.com/LazyNewbie/gh_test/bages-data/coverage.svg?token=GHSAT0AAAAAACSKF3SV44NSCO477CUPHXS6ZV3EPBA">'
#                  })




